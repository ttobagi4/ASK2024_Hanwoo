import sys
import cv2
import numpy as np
from PyQt5.QtWidgets import QApplication, QWidget, QFileDialog, QPushButton, QVBoxLayout, QHBoxLayout, QGraphicsView, QLabel, QSizePolicy, QGraphicsScene, QSlider
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QFont, QPixmap, QImage

class MyUI(QWidget):
    def __init__(self):
        super().__init__()

        # UI 요소들 생성
        self.init_ui()

    def init_ui(self):
        # "이미지 불러오기" 버튼 생성
        self.btn1 = QPushButton('이미지 불러오기', self)
        self.btn1.clicked.connect(self.load_image)

        # "분석하기" 버튼 생성
        self.btn2 = QPushButton('분석하기', self)
        self.btn2.clicked.connect(self.btn2_clicked)

        # 버튼 글자 크기 조절
        font = QFont()
        font.setPointSize(12)  # 원하는 글자 크기로 설정
        self.btn1.setFont(font)
        self.btn2.setFont(font)

        # 수평 슬라이드바 생성
        self.slider = QSlider(1)  # 1은 수평 방향을 의미
        self.slider.setRange(0, 255)  # 슬라이드바의 범위 설정
        self.slider.setValue(123)  # 초기 값 설정
        self.slider.setFixedSize(300, 30)
        self.slider.valueChanged.connect(self.updateThreshold)
        self.label = QLabel('Threshold Value: 123')

        # 슬라이드바에 눈금 표시 설정
        self.slider.setTickPosition(QSlider.TicksBelow)  # 눈금을 슬라이드바 아래에 표시
        self.slider.setTickInterval(10)  # 눈금 간격 설정

        # "Threshold Value" 라벨 생성
        self.label = QLabel('Threshold Value: 123', self)

        # 폰트 크기 조절
        font = QFont()
        font.setPointSize(12)  # 원하는 글자 크기로 설정
        self.label.setFont(font)

        # 그래픽스 뷰 1 생성
        self.graphicsView1 = QGraphicsView(self)
        self.graphicsView1.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)

        # 그래픽스 뷰 2 생성
        self.graphicsView2 = QGraphicsView(self)
        self.graphicsView2.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)

        # 텍스트 라벨 생성
        self.grade_label = QLabel('등급 :', self)
        self.grade_value_label = QLabel('', self)
        self.grade_label.setAlignment(Qt.AlignCenter)
        self.grade_value_label.setAlignment(Qt.AlignCenter)
        self.grade_label.setFont(QFont('Arial', 15))
        self.grade_value_label.setFont(QFont('Arial', 15))
        
        # "저장" 버튼 생성
        self.save_btn = QPushButton('이미지 저장', self)
        self.save_btn.clicked.connect(self.save_image)

        # 버튼 글자 크기 조절
        self.save_btn.setFont(font)

        # "산출 결과" 라벨 생성
        grade_label = QLabel('산출 결과', self)
        grade_label.setAlignment(Qt.AlignCenter)
        grade_label.setFont(QFont('Arial', 15))

        # 수직 레이아웃 1 생성 및 위젯 추가
        vbox1 = QVBoxLayout()
        vbox1.addStretch(10)  # 상단에 여백 추가
        vbox1.addWidget(self.btn1)
        vbox1.addStretch(2)  # 중단에 여백 추가
        vbox1.addWidget(self.btn2)
        vbox1.addStretch(2)
        vbox1.addWidget(self.slider)
        vbox1.addWidget(self.label)
        vbox1.addStretch(50)  # 하단에 여백 추가

        # 수직 레이아웃 2 생성 및 위젯 추가
        vbox2 = QVBoxLayout()
        vbox2.addStretch(5)
        vbox2.addWidget(grade_label)
        vbox2.addWidget(self.grade_label)
        vbox2.addWidget(self.grade_value_label)
        vbox2.addStretch(12)

        # 수직 레이아웃 3 생성 및 "저장" 버튼 추가
        vbox3 = QVBoxLayout()
        vbox3.addStretch(10)  # 상단에 여백 추가
        vbox3.addWidget(self.save_btn)
        vbox3.addStretch(1)  # 중단에 여백 추가
        # 수평 레이아웃 1 생성 및 수직 레이아웃 1, 2 추가
        hbox1 = QHBoxLayout()
        hbox1.addLayout(vbox1)
        hbox1.addWidget(self.graphicsView1)
        hbox1.addWidget(self.graphicsView2)
        hbox1.addLayout(vbox2)
        hbox1.addLayout(vbox3)
        
        # 수직 레이아웃을 윈도우에 설정
        self.setLayout(hbox1)

        # 기존 수평 레이아웃 1에 수직 레이아웃 3 추가
        hbox1.addLayout(vbox3)

        # 윈도우의 제목 설정
        self.setWindowTitle('한우 등심 마블링 및 등급 산출 자동화 프로그램')

        # 윈도우 크기 조절
        self.resize(2500, 1500)  # 원하는 초기 가로, 세로 크기로 설정

        # UI를 보여줌
        self.show()

        # 방향키 이벤트 설정
        self.setFocusPolicy(Qt.StrongFocus)

    def keyPressEvent(self, event):
        # 방향키를 눌렀을 때 슬라이드바 값을 조절
        if event.key() == Qt.Key_Left:
            self.slider.setValue(self.slider.value() - 1)
        elif event.key() == Qt.Key_Right:
            self.slider.setValue(self.slider.value() + 1)

    def updateThreshold(self):
        threshold_value = self.slider.value()
        self.label.setText(f'Threshold Value: {threshold_value}')

    # 이미지 불러오기
    def load_image(self):
        file_dialog = QFileDialog()
        file_path, _ = file_dialog.getOpenFileName(self, '이미지 불러오기', '', '이미지 파일 (*.png *.jpg *.bmp *.gif *.jpeg)')

        if file_path:
            image = cv2.imread(file_path)
            if image is not None:
                self.display_image(image)
            else:
                print("이미지를 불러오지 못했습니다.")
        else:
            print("이미지를 선택하지 않았습니다.")

    # 그래픽스 뷰 1에 이미지 띄우기
    def display_image(self, image):
        # 이미지 컬러 채널을 BGR에서 RGB로 변환
        image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

        # 불러온 이미지를 Qt 포맷으로 변환
        h, w, ch = image_rgb.shape
        bytes_per_line = ch * w
        qt_image = QImage(image_rgb.data, w, h, bytes_per_line, QImage.Format_RGB888)
        pixmap = QPixmap.fromImage(qt_image)

        # 이미지를 그래픽스 뷰에 표시
        if not self.graphicsView1.scene():
            self.graphicsView1.setScene(QGraphicsScene())
        self.graphicsView1.scene().clear()
        self.graphicsView1.scene().addPixmap(pixmap)

        # 표시된 이미지를 클래스 변수로 저장
        self.current_image = image.copy()

    def save_image(self):
        # 그래픽스 뷰 2에 있는 이미지 저장
        if hasattr(self, 'current_binary_image'):
            binary_image = self.current_binary_image
            file_dialog = QFileDialog()
            file_path, _ = file_dialog.getSaveFileName(self, '이미지 저장', '', '이미지 파일 (*.png *.jpg *.bmp *.jpeg)')

            if file_path:
                # 등급 텍스트를 이미지에 추가
                if hasattr(self, 'grade_value_label') and self.grade_value_label.text():
                    grade_text = self.grade_value_label.text()
                    font = cv2.FONT_HERSHEY_SIMPLEX
                    font_scale = 0.5
                    font_thickness = 1
                    font_color = (255, 255, 255)  # 흰색
                    y_position = int(binary_image.shape[0] - 5)  # 이미지 하단으로부터 5픽셀 위에 위치
                    x_position = int(binary_image.shape[1] * 0.95)  # 이미지 왼쪽으로부터 98% 위치에 위치
                    cv2.putText(binary_image, grade_text, (x_position, y_position), font, font_scale, font_color, font_thickness)
                
                cv2.imwrite(file_path, binary_image)
                print("이미지가 저장되었습니다.")
            else:
                print("저장이 취소되었습니다.")
        else:
            print("이미지가 없습니다. 먼저 분석 버튼을 눌러주세요.")

    def btn2_clicked(self):
        threshold_value = self.slider.value()  # 슬라이더 값 가져오기
        # 현재 표시된 이미지 가져오기
        if hasattr(self, 'current_image'):
            image = self.current_image
        else:
            print("이미지를 불러오지 못했습니다.")
            return

        gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        edge = cv2.Canny(gray_image, 100, 100)
        _, thresh = cv2.threshold(gray_image, threshold_value, 255, cv2.THRESH_BINARY)
        thresh = cv2.erode(thresh, None, iterations=1)
        thresh = cv2.dilate(thresh, None, iterations=1)
        contours_found, hierarchy = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        contours_layer = sorted(contours_found, key=cv2.contourArea, reverse=True)
        if contours_layer:
            largest_contour = contours_layer[0]
            mask_img = np.zeros_like(gray_image)
            cv2.drawContours(mask_img, [largest_contour], -1, (255), thickness=cv2.FILLED)
            background_img = cv2.bitwise_and(image, image, mask=~mask_img)
            gray_background = cv2.cvtColor(background_img, cv2.COLOR_BGR2GRAY)
            _, binary_background = cv2.threshold(gray_background, 110, 255, cv2.THRESH_BINARY)
            self.display_binary_image(binary_background, self.graphicsView2)

            # 등급 라벨에 등급 표시
            total_pixels = binary_background.size
            white_pixels = cv2.countNonZero(binary_background)
            white_ratio = white_pixels / total_pixels
            white_ratio_fin = white_ratio * 100

            if white_ratio_fin > 15.6:
                level = "1++"
            elif white_ratio_fin >= 15.5:
                level = "1+"
            elif 12.3 < white_ratio_fin < 15.5:
                level = "1+"
            elif white_ratio_fin >= 12.2:
                level = "1"
            elif 9 < white_ratio_fin < 12.2:
                level = "1"
            elif white_ratio_fin >= 8.9:
                level = "2"
            elif 5 < white_ratio_fin < 8.9:
                level = "2"
            elif white_ratio_fin >= 4.9:
                level = "3"
            elif 1 < white_ratio_fin < 4.9:
                level = "3"
            else:
                level = "등급 산정 불가능"

            # 등급 라벨에 등급 표시
            self.grade_value_label.setText(level)

            # 이미지를 클래스 변수로 저장
            self.current_binary_image = binary_background.copy()

    # 그래픽스 뷰 2에 컨투어 딴 이미지 띄우기
    def display_binary_image(self, image, graphics_view):
        h, w = image.shape
        bytes_per_line = w
        qt_image = QImage(image.data, w, h, bytes_per_line, QImage.Format_Grayscale8)

        pixmap = QPixmap.fromImage(qt_image)

        graphics_view.setScene(None)
        graphics_view.scene = QGraphicsScene()
        graphics_view.setScene(graphics_view.scene)
        graphics_view.scene.addPixmap(pixmap)


if __name__ == '__main__':
    app = QApplication(sys.argv)
    my_ui = MyUI()
    sys.exit(app.exec_())
